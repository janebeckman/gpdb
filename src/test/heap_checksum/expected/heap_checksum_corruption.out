-- The following test simulates corruption of a heap relation file and
-- verifies the select behavior on this corrupted table, the related indexes
-- and toast tables.
-- Mask out the expected and actual values of the checksums when comparing the
-- result. All we care about is that they don't match.
--
-- start_matchsubs
-- m/^ERROR:.*invalid page in block.*/
-- s/invalid page in block.*/invalid page in block/
-- m/^ERROR:  missing chunk number.*/
-- s/missing chunk number.*/missing chunk number/
-- end_matchsubs
-- Ignore the status messages from the helper function. They're useful for
-- debugging, but the output is different on every invocation.
-- start_matchignore
-- m/^INFO:  corrupting file/
-- m/^INFO:  skipping non-existent file/
-- m/^WARNING:  page verification failed, calculated checksum.*/
-- end_matchignore
-- start_ignore
CREATE LANGUAGE plpythonu;
-- end_ignore
-- Create our test tables (and functions) in a bespoken schema that we can drop
-- at the end. We don't want to leave any corrupt files lying around!
CREATE SCHEMA corrupt_heap_checksum;
set search_path='corrupt_heap_checksum';
-- to ignore the CONTEXT from messages from the plpython helpers, and to ignore
-- DETAILs from the checksum errors.
\set VERBOSITY terse
-- Return path to the file holding data for the given table (relative to
-- $PGDATA).
--
CREATE FUNCTION get_relation_path(tbl regclass) returns text as $$
  (select 'base/' || db.oid || '/' || c.relfilenode from pg_class c, pg_database db where c.oid = $1 AND db.datname = current_database())
$$ language sql VOLATILE;
-- Return path to the file holding data for the given table's TOAST table (relative to
-- $PGDATA).
--
CREATE FUNCTION get_toast_path(tbl regclass) returns text as $$
  (select 'base/' || db.oid || '/' || c.relfilenode from pg_class c, pg_database db where c.oid = ( SELECT reltoastrelid FROM pg_class  WHERE oid = $1) AND db.datname = current_database())
$$ language sql VOLATILE;
-- Return name of the given table's TOAST table (relative to
-- $PGDATA).
--
CREATE FUNCTION get_toast_name(tbl regclass) returns text as $$
  (select relname::text from pg_class where oid = ( SELECT reltoastrelid FROM pg_class  WHERE oid = $1))
$$ language sql VOLATILE;
-- Return path to the file holding data for the given table's index (relative to
-- $PGDATA).
--
CREATE FUNCTION get_index_path(tbl regclass) returns text as $$
  (select 'base/' || db.oid || '/' || c.relfilenode from pg_class c, pg_database db where c.oid = ( SELECT indexrelid FROM pg_index  WHERE indrelid = $1) AND db.datname = current_database())
$$ language sql VOLATILE;
-- Corrupt data file at given path (if it exists on this segment)
--
-- If corruption_offset is negative, it's an offset from the end of file.
-- Otherwise it's from the beginning of file.
--
-- Returns 0. (That's handy in the way this function is called, because we can
-- do a SUM() over the return values, and it's always 0, regardless of the
-- number of segments in the cluster.)
CREATE FUNCTION corrupt_file(data_file text, corruption_offset int4)
RETURNS integer as $$
  import os;

  if not os.path.isfile(data_file):
    plpy.info('skipping non-existent file %s' % (data_file))
  else:
    plpy.info('corrupting file %s at %s' % (data_file, corruption_offset))

    with open(data_file , "rb+") as f:
      char_location=0
      write_char='*'  # CONST.CORRUPTION

      if corruption_offset >= 0:
        f.seek(corruption_offset, 0)
      else:
        f.seek(corruption_offset, 2)

      f.write(write_char)
      f.close()

  return 0
$$ LANGUAGE plpythonu;
CREATE OR REPLACE FUNCTION invalidate_buffers_for_rel(tablename text) RETURNS BOOL AS
$$
DECLARE
tablespace Oid;
database Oid;
relfile Oid;
result bool;
BEGIN
    SELECT dattablespace, oid INTO tablespace, database FROM pg_database WHERE datname = current_database();
    SELECT relfilenode INTO relfile FROM pg_class WHERE relname = tablename;
    SELECT public.invalidate_buffers(tablespace, database, relfile) INTO result;
    RETURN result;
END;
$$ LANGUAGE plpgsql;
-- Make sure that checksum is enabled
SHOW data_checksums;
 data_checksums 
----------------
 on
(1 row)

--  Corrupt a heap table
create table corrupt_table(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
insert into corrupt_table select i from generate_series(1, 10) i;
checkpoint;
select invalidate_buffers_for_rel('corrupt_table') from gp_dist_random('gp_id');
 invalidate_buffers_for_rel 
----------------------------
 t
 t
 t
(3 rows)

-- Verify corruption on heap table
select SUM(corrupt_file(get_relation_path('corrupt_table'), -50)) from gp_dist_random('gp_id');
INFO:  corrupting file base/16496/16400 at -50  (seg0 slice1 127.0.0.1:25432 pid=48282)
INFO:  corrupting file base/16496/16400 at -50  (seg1 slice1 127.0.0.1:25433 pid=48283)
INFO:  corrupting file base/16496/16400 at -50  (seg2 slice1 127.0.0.1:25434 pid=48284)
 sum 
-----
   0
(1 row)

SELECT COUNT(*) FROM corrupt_table;
WARNING:  page verification failed, calculated checksum 12786 but expected 37746  (seg0 slice1 127.0.0.1:25432 pid=48282)
WARNING:  page verification failed, calculated checksum 3501 but expected 44845  (seg1 slice1 127.0.0.1:25433 pid=48283)
WARNING:  page verification failed, calculated checksum 26345 but expected 50281  (seg2 slice1 127.0.0.1:25434 pid=48284)
ERROR:  invalid page in block 0 of relation base/16496/16400  (seg0 slice1 127.0.0.1:25432 pid=48282)
-- Corrupt a heap table, with toast table 
create table corrupt_toast_table(a int, comment bytea);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
insert into corrupt_toast_table select i, ("decode"(repeat('a',3000000),'escape')) from generate_series(1,10) i;
checkpoint;
select invalidate_buffers_for_rel(get_toast_name('corrupt_toast_table')) from gp_dist_random('gp_id');
 invalidate_buffers_for_rel 
----------------------------
 t
 t
 t
(3 rows)

-- Verify corruption on toast table
select SUM(corrupt_file(get_toast_path('corrupt_toast_table'), -50)) from gp_dist_random('gp_id');
INFO:  corrupting file base/16496/16402 at -50  (seg0 slice1 127.0.0.1:25432 pid=48282)
INFO:  corrupting file base/16496/16402 at -50  (seg1 slice1 127.0.0.1:25433 pid=48283)
INFO:  corrupting file base/16496/16402 at -50  (seg2 slice1 127.0.0.1:25434 pid=48284)
 sum 
-----
   0
(1 row)

SELECT md5(comment::text) FROM corrupt_toast_table;
WARNING:  page verification failed, calculated checksum 53958 but expected 34319  (seg0 slice1 127.0.0.1:25432 pid=48282)
WARNING:  page verification failed, calculated checksum 46211 but expected 11834  (seg1 slice1 127.0.0.1:25433 pid=48283)
WARNING:  page verification failed, calculated checksum 50724 but expected 23709  (seg2 slice1 127.0.0.1:25434 pid=48284)
ERROR:  invalid page in block 2 of relation base/16496/16402  (seg0 slice1 127.0.0.1:25432 pid=48282)
-- Corrupt a Btree Index
create table corrupt_btree_index(a int, b char(50)); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
create index btree_index on corrupt_btree_index(a);
insert into corrupt_btree_index select i, 'a' from generate_series(1, 10) i;
checkpoint;
select invalidate_buffers_for_rel('btree_index') from gp_dist_random('gp_id');
 invalidate_buffers_for_rel 
----------------------------
 t
 t
 t
(3 rows)

-- Verify corruption on Btree index
select SUM(corrupt_file(get_index_path('corrupt_btree_index'), -50)) from gp_dist_random('gp_id');
INFO:  corrupting file base/16496/16405 at -50  (seg0 slice1 127.0.0.1:25432 pid=48282)
INFO:  corrupting file base/16496/16405 at -50  (seg1 slice1 127.0.0.1:25433 pid=48283)
INFO:  corrupting file base/16496/16405 at -50  (seg2 slice1 127.0.0.1:25434 pid=48284)
 sum 
-----
   0
(1 row)

insert into corrupt_btree_index select i, 'a' from generate_series(1, 10) i; -- insert will trigger scan of the index
WARNING:  page verification failed, calculated checksum 40032 but expected 16096  (seg0 127.0.0.1:25432 pid=48282)
WARNING:  page verification failed, calculated checksum 44128 but expected 3808  (seg2 127.0.0.1:25434 pid=48284)
WARNING:  page verification failed, calculated checksum 11666 but expected 36626  (seg1 127.0.0.1:25433 pid=48283)
ERROR:  invalid page in block 1 of relation base/16496/16405  (seg0 127.0.0.1:25432 pid=48282)
-- Corrupt a Bitmap Index 
create table corrupt_bitmap_index(a int, b char(50)); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
create index bitmap_index on corrupt_bitmap_index(a);
insert into corrupt_bitmap_index select i, 'a' from generate_series(1, 10) i;
checkpoint;
select invalidate_buffers_for_rel('bitmap_index') from gp_dist_random('gp_id');
 invalidate_buffers_for_rel 
----------------------------
 t
 t
 t
(3 rows)

-- Verify corruption on Bitmap index 
select SUM(corrupt_file(get_index_path('corrupt_bitmap_index'), -50)) from gp_dist_random('gp_id');
INFO:  corrupting file base/16496/16407 at -50  (seg0 slice1 127.0.0.1:25432 pid=48282)
INFO:  corrupting file base/16496/16407 at -50  (seg1 slice1 127.0.0.1:25433 pid=48283)
INFO:  corrupting file base/16496/16407 at -50  (seg2 slice1 127.0.0.1:25434 pid=48284)
 sum 
-----
   0
(1 row)

insert into corrupt_bitmap_index select i, 'a' from generate_series(1, 10) i; -- insert will trigger scan of the index
WARNING:  page verification failed, calculated checksum 25994 but expected 50954  (seg0 127.0.0.1:25432 pid=48282)
WARNING:  page verification failed, calculated checksum 16646 but expected 58246  (seg1 127.0.0.1:25433 pid=48283)
WARNING:  page verification failed, calculated checksum 5552 but expected 46896  (seg2 127.0.0.1:25434 pid=48284)
ERROR:  invalid page in block 1 of relation base/16496/16407  (seg0 127.0.0.1:25432 pid=48282)
-- Clean up. We don't want to leave the corrupt tables lying around!
reset search_path;
DROP SCHEMA corrupt_heap_checksum CASCADE;
NOTICE:  drop cascades to table corrupt_heap_checksum.corrupt_bitmap_index
NOTICE:  drop cascades to table corrupt_heap_checksum.corrupt_btree_index
NOTICE:  drop cascades to table corrupt_heap_checksum.corrupt_toast_table
NOTICE:  drop cascades to table corrupt_heap_checksum.corrupt_table
NOTICE:  drop cascades to function corrupt_heap_checksum.invalidate_buffers_for_rel(text)
NOTICE:  drop cascades to function corrupt_heap_checksum.corrupt_file(text,integer)
NOTICE:  drop cascades to function corrupt_heap_checksum.get_index_path(regclass)
NOTICE:  drop cascades to function corrupt_heap_checksum.get_toast_name(regclass)
NOTICE:  drop cascades to function corrupt_heap_checksum.get_toast_path(regclass)
NOTICE:  drop cascades to function corrupt_heap_checksum.get_relation_path(regclass)
