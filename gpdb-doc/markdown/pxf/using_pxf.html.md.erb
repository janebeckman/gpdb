---
title: Using PXF to Read and Write External Data
---

<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

The PXF extension framework implements a protocol named `pxf` that you can use to create an external table that references data in an external data store. The `pxf` protocol is packaged as a Greenplum Database extension.

You must enable the PXF extension in each database in which you plan to use the framework to access external data. You must also explicitly `GRANT` permission on the `pxf` protocol to those users/roles who require access.

Once the extension is registered and privileges assigned, you can use the `CREATE EXTERNAL TABLE` command to create an external table using the `pxf` protocol. PXF provides a set of built-in profiles that enable you to read and write to external systems including HDFS. You specify the profile in the `CREATE EXTERNAL TABLE` command `LOCATION` URI.


## <a id="start_pxf"></a>Enabling/Disabling PXF

You must explicitly enable the PXF extension in each Greenplum Database in which you plan to use the extension.
 
### <a id="enable-pxf-steps"></a>Enable Procedure

Perform the following procedure for **_each_** database in which you want to use the PXF extension:

1. Connect to the database as the `gpadmin` user:

    ``` shell
    gpadmin@gpmaster$ psql -d <database-name> -U gpadmin
    ```

2. Create the PXF extension. You must have Greenplum Database administrator privileges to create an extension. For example:

    ``` sql
    database-name=# CREATE EXTENSION pxf;
    ```
    
    Creating the `pxf` extension registers the call handlers required for PXF to access external data.

### <a id="disable-pxf-steps"></a>Disable Procedure
  
When you no longer want to use PXF on a specific database, you must explicitly disable the PXF extension for that database:

1. Connect to the database as the `gpadmin` user:

    ``` shell
    gpadmin@gpmaster$ psql -d <database-name>
    ```
    
2. Drop the PXF extension:

    ``` sql
    database-name=# DROP EXTENSION pxf;
    ```
    
    The `DROP` command fails if there are any external tables using the `pxf` protocol. Add the `CASCADE` option to forcibly remove these tables.


## <a id="access_pxf"></a>Granting Access to PXF

To use PXF to access external data, you create an external table that uses the `pxf` protocol. You must specifically grant access to the `pxf` protocol to all Greenplum Database non-`SUPERUSER` roles that require such access. 

To grant a specific role access to the `pxf` protocol, use the `GRANT` command. For example, to grant the role named `bill` read access to the `pxf` protocol:

``` sql
GRANT SELECT ON PROTOCOL pxf TO bill; 
```

**Note**: The `pxf` protocol supports only read access at this time.


## <a id="built-inprofiles"></a> PXF Profiles

PXF is installed with a number of built-in profiles. These profiles simplify access to external data sources and support data of varying file formats. 

PXF provides the following profiles:

| Data Source | File Format | Profile Name | Description |
|-------|---------|------------|----------------|
| HDFS | Text | HdfsTextSimple | Read or write delimited single line records from or to plain text files on HDFS.|
| HDFS | Text | HdfsTextMulti | Read delimited single or multi-line records with quoted linefeeds from plain text files on HDFS. |
| HDFS | Avro | Avro | Read Avro format binary files (filename.avro). |

PXF profiles are defined in the `$GPHOME/pxf/conf/pxf-profiles.xml` configuration file. A profile definition includes the name of the profile, a description, and the Java classes that implement accessing, fragmenting, and resolving external data for the profile. For example, the `HdfsTextSimple` profile definition is reproduced below:

``` xml
<profile>
        <name>HdfsTextSimple</name>
        <description>This profile is suitable for using when reading delimited single line records from plain text files
            on HDFS
        </description>
        <plugins>
            <fragmenter>org.apache.hawq.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.apache.hawq.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.apache.hawq.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
    </profile>
```

**Note**: The typical PXF user need not concern themselves with the profile `plugins`.


## <a id="profile-dependencies"></a>PXF Dependencies

You use the PXF Extension Framework to access external systems. Depending upon the external data source, this access may require that you install and/or configure additional components or services. For example, to use PXF to access a text file stored in HDFS, you must install a Hadoop client on each Greenplum Database segment host.

PXF may depend on JAR files or other configuration information provided by the additional components. The `$GPHOME/pxf/conf/pxf-private.classpath` and `$GPHOME/pxf/conf/pxf-public.classpath` configuration files identify PXF JAR dependencies. PXF manages the `pxf-private.classpath` file, adding entries as necessary based on options you provide to the `pxf init` command. 

Should you need to add additional JAR dependencies for PXF, you must add them to the `pxf-public.classpath` file on each segment host, and then restart PXF on each host.


## <a id="creatinganexternaltable"></a>Creating an External Table using PXF

The syntax for a `CREATE EXTERNAL TABLE` command that provides a `LOCATION` clause specifying the PXF protocol is as follows:

``` sql
CREATE [READABLE|WRITABLE] EXTERNAL TABLE <table_name>
        ( <column_name> <data_type> [, ...] | LIKE <other_table> )
LOCATION('pxf://<path-to-data>?PROFILE[&<custom-option>=<value>[...]]')
FORMAT '[TEXT|CSV|CUSTOM]' (<formatting-properties>);
```
**Note**: Not every PXF profile supports writable external tables. Refer to [Writing HDFS Files with PXF](hdfs_write_pxf.html) for a detailed discussion of the HDFS connector profiles that support this feature.

The `LOCATION` clause in a `CREATE EXTERNAL TABLE` statement specifying the `pxf` protocol is a URI that identifies the path to, or other information describing, the location of the data. For example, if the external data source is HDFS, the \<path-to-data\> would identify the full file system path to a specific HDFS file.

The query portion of the URI, introduced by the question mark (?), must identify the PXF profile name.

Greenplum Database passes the parameters in the location URI as headers to the PXF Java service. You can pass additional information to a PXF profile using the optional \<custom-options\> and \<formatting-properties\> components of the `LOCATION` string.

<caption><span class="tablecap">Table 1. Parameter values and description</span></caption>

<a id="creatinganexternaltable__table_pfy_htz_4p"></a>

| Keyword               | Value and Description                                                                                                                                                                                                                                                          |
|-------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| \<path\-to\-data\>        | A directory, file name, wildcard pattern, table name, etc. The \<path-to-data\> syntax is dependent upon the profile currently in use.                                                                                                                                                                                                                    |
| PROFILE              | The profile PXF uses to access the data. PXF supports connectors that expose profiles named `HdfsTextSimple`, `HdfsTextMulti`, and `Avro`.                                                                                                                                                                                   |
| \<custom-option\>=\<value\> | Additional options and values to pass to the profile at runtime. Profile-specific.                                                                  |
| \<formatting-properties\> | Formatting properties to pass to the profile at runtime. `FORMAT`- and profile-specific.                                                                  |

**Note:** When you create PXF external tables, you cannot use the `HEADER` option in your `FORMAT` specification.



